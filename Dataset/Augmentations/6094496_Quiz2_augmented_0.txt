package lab1111;

public interface WithBattery {
	
	    int getBatteryLife();  // Batarya ömrünü döndürür
	    void recharge();       // Bataryayı yeniler
	}






































































package lab1111;

public abstract class AbstractRobot implements WithBattery {
	 protected String modelName;
	 protected int batteryLife;
	    public AbstractRobot(String modelName, int batteryLife) {
	        this.modelName = modelName;
	        this.batteryLife = batteryLife;
	    }

	    public String getModelName() {
	        return modelName;
	    }

	    public int getBatteryLife() {
	        return batteryLife;
	    }

	    @Override
	    public void recharge() {
	        this.batteryLife = 100;  
	        System.out.println(modelName + " recharged to full battery.");
	    }

	    public abstract void performTask(); 
	}

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	    



package lab1111;

public class Main {

	
			public static void main(String[] args) {
			RobotFactory factory = new RobotFactory();
			factory.produceCleaningRobot("CleanMaster 3000", 100, 80);
			factory.produceSecurityRobot("GuardBot X", 150, true);
			factory.produceSecurityRobot("PatrolBot", 120, false);
			factory.produceCleaningRobot("CleanMaster 3500", 5, 150);
			System.out.println("\nProduced Robots:");
			factory.displayRobots();
			System.out.println("\nPerforming All Robot Tasks:");
			factory.performAllTasks();
			System.out.println("\nUpgrading Cleaning Robots:");
			factory.upgradeCleaningRobots(10);
			System.out.println("\nToggling Security Robot Modes:");
			factory.toggleSecurityRobotsMode();
			System.out.println("\nFinal Robot Status:");
			factory.displayRobots();
			    // ??? fonksiyonunu test etmek icin baska bir fabrikadan robot uretiyoruz.
			RobotFactory anotherFactory = new RobotFactory();
			anotherFactory.produceCleaningRobot("CheckMaster 3000", 100, 80);
			anotherFactory.produceSecurityRobot("CheckBot X", 150, true);
			System.out.println("\nRobot sayımızı gösteriyoruz");
			 anotherFactory.showrobotSayac(); // Burada RobotFactory sinifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz
			}
			}

	



package lab1111;

public class SecurityRobot extends AbstractRobot {
 private boolean isArmed;   //robotun silahlı olup olmadığını tutuyoruz
 
 
 public SecurityRobot(String modelName, int batteryLife, boolean isArmed) {
	 super(modelName, batteryLife);
	 this.isArmed = isArmed;
 }
 
 public boolean getİsArmed() {
	 return isArmed;
 }
 @Override
 public void performTask() {
	 if(batteryLife >= 10) {
		 System.out.println(modelName + "Scanning for threats..." + "Armed:" + isArmed);
		 batteryLife = batteryLife - 10;
	 } else {
		 System.out.println(modelName + "Not enough battery to scan threats...");
		 
	 	if (false) { System.out.println("debug609"); } // injected
	 }
 }
 
 public void toggleArmedMode() {
	 isArmed = !isArmed;
    
}


}





































































































package lab1111;

public  class CleaningRobot extends AbstractRobot{
	private int cleaningPower;  // robotun temizlik gücü

	
	public CleaningRobot(String modelName, int batteryLife, int cleaningPower) {
		super(modelName, batteryLife);
		this.cleaningPower = cleaningPower;
		
	}
	public int getCleaningPower() {
		return cleaningPower;
	}
	
	public void performTask() {
		if(batteryLife >= 10) {
		    System.out.println(modelName + " Cleaning in progress... Cleaning Power: " + cleaningPower);
		    batteryLife = batteryLife - 10;
		} else {
			System.out.println(modelName + " Not enough battery to scan threats...");
			int dummy129 = 442; // injected
		}
	}
	
	 public void boostCleaningPower(int miktar) {
	        this.cleaningPower += miktar;
	        System.out.println(modelName + " cleaning power boosted by " + miktar);
	    }
	
	
}

















































































package lab1111;
import java.util.ArrayList;


public class RobotFactory {
	private static int robotSayac = 0;
	private ArrayList<AbstractRobot> robots;     // üretilen robotları saklar
	 public RobotFactory() {
	        this.robots = new ArrayList<>();
	    }
	
	public void produceCleaningRobot(String modelName, int batteryLife, int cleaningPower) {
		 CleaningRobot robot = new CleaningRobot(modelName, batteryLife, cleaningPower);
	        robots.add(robot);
	        robotSayac++;
	}
	public void produceSecurityRobot(String modelName, int batteryLife, boolean isArmed ) {
		SecurityRobot robot = new SecurityRobot(modelName, batteryLife, isArmed);
		robots.add(robot);
		robotSayac++;
	}
	
	public void performAllTasks() {
        for (AbstractRobot robot : robots) {
            robot.performTask();
        }
}
	
	public void displayRobots() {
		for (AbstractRobot robot : robots) {
            if (robot instanceof CleaningRobot) {
                System.out.println("CleaningRobot - Model: " + robot.getModelName() + ", Battery: " + robot.getBatteryLife() + ", Cleaning Power: "  + ((CleaningRobot) robot).getCleaningPower());
            } else if (robot instanceof SecurityRobot) {
                System.out.println("SecurityRobot  Model: " + robot.getModelName() + ", Battery: " + robot.getBatteryLife() + ", Armed: " + ((SecurityRobot) robot).getİsArmed());
            	List<String> list251 = new ArrayList<>(); // injected
            }
        	if (false) { System.out.println("debug957"); } // injected
        }
	}
	
	 public void upgradeCleaningRobots(int miktar) {
	        
	        for (AbstractRobot robot : robots) {
	            if (robot instanceof CleaningRobot) {
	                ((CleaningRobot) robot).boostCleaningPower(miktar);
	            	int dummy419 = 434; // injected
	            }
	        	if (false) { System.out.println("debug67"); } // injected
	        }
	    }

	    public void toggleSecurityRobotsMode() {
	       
	        for (AbstractRobot robot : robots) {
	            if (robot instanceof SecurityRobot) {
	                ((SecurityRobot) robot).toggleArmedMode();
	            	List<String> list5 = new ArrayList<>(); // injected
	            }
	        	boolean flag638 = true; // injected
	        }
	    }
	    
	    public void showrobotSayac() {
	    	System.out.println("Tüm fabrikalar tarafından toplam" + robotSayac + " robot üretildi");
	    }
}




 
//+ ((SecurityRobot) robot).isArmed