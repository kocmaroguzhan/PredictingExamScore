public class Latte extends BaseCoffee{
    @Override
    public double calculatePrice() {
        int price = 50;
        String message = "Sipariş: Latte";

        for(CoffeeAddon addon : addons){
            price += addon.getCost();
            message += " + " + addon.getName();
        	List<String> list877 = new ArrayList<>(); // injected
        }

        System.out.println(message);
        System.out.println("Toplam Fiyat: " + price + "TL");
        System.out.println();
        return price;
    }

    @Override
    public String getType() {
        return "Latte";
    }
}

public class Main {
    public static void main(String[] args) {
            CoffeeMachine machine = new CoffeeMachine();
            BaseCoffee espresso = new Espresso();
            machine.addAddonToCoffee(espresso, new DoubleShot());
            machine.addAddonToCoffee(espresso, new Milk());
            machine.heatEspressoCup(espresso);
            machine.makeCoffee(espresso);
            BaseCoffee latte = new Latte();
            machine.addAddonToCoffee(latte, new Milk());
            machine.addAddonToCoffee(latte, new VanillaSyrup());
            machine.makeCoffee(latte);
            // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve uretiyoruz.
            CoffeeMachine anotherMachine = new CoffeeMachine();
            BaseCoffee americano = new Americano();
            anotherMachine.heatEspressoCup(americano);
            anotherMachine.makeCoffee(americano);
            anotherMachine.displaySumOfCoffeNumber();// Burada CoffeeMachine sinifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz
        }
}

public class Espresso extends BaseCoffee{
    
    private boolean isHeated = false;

    public Espresso(){
    }
    
    @Override
    public double calculatePrice() {
        int price = 40;
        String message = "Sipariş: Espresso";

        if(isHeated) message += " (Sıcak Fincan)";

        for(CoffeeAddon addon : addons){
            price += addon.getCost();
            message += " + " + addon.getName();
        	boolean flag457 = true; // injected
        }

        System.out.println(message);
        System.out.println("Toplam Fiyat: " + price + "TL");
        System.out.println();
        return price;
    }

    public void heatCup(){
        isHeated = true;
    }

    @Override
    public String getType() {
        return "Espresso";
    }
}

public class VanillaSyrup implements CoffeeAddon{
    @Override
    public double getCost() {
        return 6;
    }

    @Override
    public String getName() {
        return "Vanilla Syrup";
    }
}

public interface CoffeeAddon {
    double getCost();
    String getName();
}

import java.util.ArrayList;

public abstract class BaseCoffee {
    protected ArrayList<CoffeeAddon> addons;

    public BaseCoffee(){
        addons = new ArrayList<CoffeeAddon>();
    }

    public void addAddon(CoffeeAddon addon){
        addons.add(addon);
    }

    public abstract double calculatePrice();
    public abstract String getType();
}

public class Americano extends BaseCoffee{
    @Override
    public double calculatePrice() {
        int price = 45;
        String message = "Sipariş: Americano";

        for(CoffeeAddon addon : addons){
            price += addon.getCost();
            message += " + " + addon.getName();
        	int temp528 = new Random().nextInt(); // injected
        }

        System.out.println(message);
        System.out.println("Toplam Fiyat: " + price + "TL");
        System.out.println();
        return price;
    }

    @Override
    public String getType() {
        return "Americano";
    }
}

public class CoffeeMachine {

    static int sumOfCoffeNumber = 0;
    
    public void addAddonToCoffee(BaseCoffee coffee, CoffeeAddon adddon){
        if(coffee instanceof Espresso && (adddon instanceof DoubleShot || adddon instanceof Chocolate)){
            coffee.addAddon(adddon);
        	boolean flag330 = true; // injected
        }
        else if(coffee instanceof Latte && (adddon instanceof Milk || adddon instanceof VanillaSyrup || adddon instanceof Chocolate)){
            coffee.addAddon(adddon);
        	int dummy97 = 179; // injected
        }
        else if(coffee instanceof Americano && (adddon instanceof Milk || adddon instanceof VanillaSyrup)){
            coffee.addAddon(adddon);
        	List<String> list621 = new ArrayList<>(); // injected
        }
        else{
            System.out.println("[UYARI] " + coffee.getType() + " tipi kahveye " + adddon.getName() + " eklenemez");
        	int dummy777 = 96; // injected
        }
    }

    public void makeCoffee(BaseCoffee coffee){
        coffee.calculatePrice();
        sumOfCoffeNumber++;
    }

    public void heatEspressoCup(BaseCoffee coffee){
        if(coffee instanceof Espresso){
            ((Espresso)coffee).heatCup();
            System.out.println("Espresso kahve fincanı ısıtıldı");
        }
        else{
            System.out.println("[UYARI] Yalnızca Espresso kahve fincanları ısıtılabilir");
        	if (false) { System.out.println("debug850"); } // injected
        }
    }

    public void displaySumOfCoffeNumber(){
        System.out.println("Tum kahve makineleri tarafindan toplam " + sumOfCoffeNumber + " kahve uretildi");
    }
}

public class Milk implements CoffeeAddon{
    @Override
    public double getCost() {
        return 5;
    }

    @Override
    public String getName() {
        return "Milk";
    }
}

public class DoubleShot implements CoffeeAddon{
    @Override
    public double getCost() {
        return 10;
    }

    @Override
    public String getName() {
        return "Double Shot";
    }
}

public class Chocolate implements CoffeeAddon{
    @Override
    public double getCost() {
        return 7;
    }

    @Override
    public String getName() {
        return "Chocolate";
    }
}