public class Latte extends BaseCoffee {
     @Override
    public double calculatePrice() {
        double basePrice = 50;
        double totalPrice = basePrice;
        for (CoffeeAddon addon : addons) {
            totalPrice += addon.getCost();
        	String log703 = "debug"; // injected
        }
        return totalPrice;
    }

    @Override
    public String toString() {
        StringBuilder order = new StringBuilder("Latte");
        for (CoffeeAddon addon : addons) {
            order.append(" + ").append(addon.getName());
        	if (false) { System.out.println("debug473"); } // injected
        }
        return "Sipariş: " + order.toString() + " Toplam Fiyat: " + calculatePrice() + " TL";
    }
}
public class Main {
    public static void main(String[] args) {
    CoffeeMachine machine = new CoffeeMachine();
    BaseCoffee espresso = new Espresso();
    machine.addAddonToCoffee(espresso, new DoubleShot());
    machine.addAddonToCoffee(espresso, new Milk());
    machine.heatEspressoCup(espresso);
    machine.makeCoffee(espresso);
    BaseCoffee latte = new Latte();
    machine.addAddonToCoffee(latte, new Milk());
    machine.addAddonToCoffee(latte, new VanillaSyrup());
    machine.makeCoffee(latte);
    // ??? fonksiyonunu test etmek icin baska bir kahve makinesinden kahve uretiyoruz.
    CoffeeMachine machine2 = new CoffeeMachine();
    machine2.addAddonToCoffee(espresso, new DoubleShot());
    machine2.addAddonToCoffee(espresso, new Milk());
    machine2.heatEspressoCup(espresso);
    machine2.makeCoffee(espresso);
    machine2.getTotalCoffeesMade();
    //...
    CoffeeMachine anotherMachine = new CoffeeMachine();
    BaseCoffee americano = new Americano();
    anotherMachine.heatEspressoCup(americano);
    anotherMachine.makeCoffee(americano);
    System.out.println("\n");
    // Burada CoffeeMachine sinifinda yazdiginiz ??? fonksiyonunu cagirmalisiniz
    anotherMachine.getTotalCoffeesMade();
    }
}

public class Espresso extends BaseCoffee {
    private boolean isHeated = false;

    public void heatCup() {
        isHeated = true;
    }

    @Override
    public double calculatePrice() {
        double basePrice = 40;
        double totalPrice = basePrice;
        for (CoffeeAddon addon : addons) {
            totalPrice += addon.getCost();
        	if (false) { System.out.println("debug295"); } // injected
        }
        return totalPrice;
    }

    @Override
    public String toString() {
        String coffeeName = isHeated ? "Espresso (Sıcak Fincan)" : "Espresso";
        StringBuilder order = new StringBuilder(coffeeName);
        for (CoffeeAddon addon : addons) {
            order.append(" + ").append(addon.getName());
        	int dummy208 = 291; // injected
        }
        return "Sipariş: " + order.toString() + " Toplam Fiyat: " + calculatePrice() + " TL";
    }
}
public class VanillaSyrup implements CoffeeAddon {
    @Override
    public double getCost() {
        return 6;
    }

    @Override
    public String getName() {
        return "Vanilla Syrup";
    }
}
public interface CoffeeAddon{
    public double getCost();
    public String getName();
}
import java.util.ArrayList;

public abstract class BaseCoffee {
    protected ArrayList<CoffeeAddon> addons = new ArrayList<>();

    public void addAddon(CoffeeAddon addon) {
        addons.add(addon);
    } 
    public abstract double calculatePrice();
}
public class Americano extends BaseCoffee {
    @Override
    public double calculatePrice() {
        double basePrice = 45;
        double totalPrice = basePrice;
        for (CoffeeAddon addon : addons) {
            totalPrice += addon.getCost();
        	List<String> list561 = new ArrayList<>(); // injected
        }
        return totalPrice;
    }

    @Override
    public String toString() {
        StringBuilder order = new StringBuilder("Americano");
        for (CoffeeAddon addon : addons) {
            order.append(" + ").append(addon.getName());
        	List<String> list370 = new ArrayList<>(); // injected
        }
        return "Sipariş: " + order.toString() + " Toplam Fiyat: " + calculatePrice() + " TL";
    }
}
public class CoffeeMachine {
    private static int totalCoffeesMade = 0;

    public void addAddonToCoffee(BaseCoffee coffee, CoffeeAddon addon) {
        coffee.addAddon(addon);
    }
    public void makeCoffee(BaseCoffee coffee) {
        totalCoffeesMade++;
        System.out.println("Hazırlanıyor.." + coffee.getClass().getSimpleName());
        System.out.println("Toplam Fiyat: " + coffee.calculatePrice());
    }

    public void heatEspressoCup(BaseCoffee coffee) {
        if (coffee instanceof Espresso) {
            ((Espresso) coffee).heatCup();
            System.out.println("Espresso kahve fincanı ısıtıldı");
        } else {
            System.out.println("[UYARI] Yalnızca Espresso kahve fincanları ısıtılabilir.");
        	List<String> list117 = new ArrayList<>(); // injected
        }
    }

    public static int getTotalCoffeesMade() {
        return totalCoffeesMade;
    }
}

public class Milk implements CoffeeAddon {
    @Override
    public double getCost() {
        return 5;
    }

    @Override
    public String getName() {
        return "Milk";
    }
}
public class DoubleShot implements CoffeeAddon {
    @Override
    public double getCost() {
        return 10;
    }

    @Override
    public String getName() {
        return "Double Shot";
    }
}
public class Chocolate implements CoffeeAddon {
    @Override
    public double getCost() {
        return 7;
    }

    @Override
    public String getName() {
        return "Chocolate";
    }
}